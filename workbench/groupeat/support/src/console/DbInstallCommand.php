<?php namespace Groupeat\Support\Console;

use App;
use Config;
use DB;
use File;
use Illuminate\Support\Facades\Schema;
use Symfony\Component\Console\Input\InputOption;

class DbInstallCommand extends Command {

	protected $name = 'db:install';
	protected $description = "Install the DB by running all the migrations and seed if needed";


    public function fire()
	{
        if (App::environment('production'))
        {
            $this->call('db:backup');
        }

        $this->deleteAllTables();
        $this->createMigrationsTable();
        $this->migrate();

        if ($this->option('seed'))
        {
            $this->setEntries();
            $this->call('db:seed', ['--force' => $this->option('force')]);
        }
    }

    private function deleteAllTables()
    {
        $tables = array_map(function($info)
        {
            $this->comment('Droping table '.$info->table_name);
            DB::statement('DROP TABLE IF EXISTS '.$info->table_name.' CASCADE');
        },
        DB::select("SELECT table_name FROM information_schema.tables WHERE table_schema = 'public'"));
    }

    private function createMigrationsTable()
    {
        if (!Schema::hasTable('migrations'))
        {
            $this->call('migrate:install');
        }
    }

    private function migrate()
    {
        $this->deleteOldMigrationFiles();

        foreach (listGroupeatPackagesWithoutSupport() as $package)
        {
            $migrationsDirectory = workbench_path($package, 'migrations');

            if (File::isDirectory($migrationsDirectory))
            {
                array_map(function($migrationPath)
                {
                    $this->publishCopy($migrationPath);
                }, File::files($migrationsDirectory));
            }
        }

        system('composer dump-autoload');
        $this->call('migrate:refresh', ['--force' => $this->option('force')]);
    }

    private function deleteOldMigrationFiles()
    {
        File::delete(File::files(app_path('database/migrations')));
    }

    private function setEntries()
    {
        $entriesKey = 'database.entries';
        $entries = Config::get($entriesKey);

        if ($this->option('entries'))
        {
            $entries = (int) $this->option('entries');
            Config::set($entriesKey, $entries);
        }

        $this->line("Creating $entries fake entities for each table");
    }

    private function publishCopy($migrationPath)
    {
        $migration = File::get($migrationPath);
        $lines = explode("\n", $migration);
        array_shift($lines);
        array_unshift($lines, "// Do not edit this file, it is a generated copy of $migrationPath");
        array_unshift($lines, "<?php");
        $dest = app_path('database/migrations/'.pathinfo($migrationPath, PATHINFO_BASENAME));
        File::put($dest, implode("\n", $lines));
    }

    protected function getOptions()
    {
        return [
            ['force', 'f', InputOption::VALUE_NONE, 'Force the operation to run when in production.', null],
            ['seed', 's', InputOption::VALUE_NONE, 'Migrate and seed.', null],
            ['entries', 'e', InputOption::VALUE_REQUIRED, 'Number of fake entries to seed the DB with.', null],
        ];
    }

}
